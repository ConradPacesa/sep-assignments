1. Describe an analogy for relating an algorithm that has efficiency O(1)
and another algorithm that has O(2^n).

O(1) is like taking a flight from New York to LA, where as O(n^2) is like
taking a bicycle from NY to LA.

2. In plain English, what is the best case scenario for binary search?

The best case for binary search would occur when the search target is first
element iterated over, in which case it would take one iteration to find.

3. In plain English, what is the worst-case scenario for binary search?

The worst-case scenario is when the target is not in the array, in which case
it would take log n iterations to determine the target is not there.

4. In plain English, what is the bounded-case scenario for binary search?

The bounded-case is somewhere between the best cast and worst-case, which means
it would take somewhere between 1 and log n iterations to find the target element.

5. Create a graph using the data below. Here's a CSV with the values you'll need.

see './loglinear.png'

6. What is the limit of the function above as n approaches infinity?

n log n

7. What is the Big-O of an algorithm that has the data points above?

O(n log n)

8. Write a Ruby method that takes a number n. This method must print the
worst-case number of iterations for linear search to find an item in collections
of size one to n. Use it to generate a table of worst-case iterations of
collections up to size 10.

Length: 1, Max # of iterations: 1
Length: 2, Max # of iterations: 2
Length: 3, Max # of iterations: 3
Length: 4, Max # of iterations: 4
Length: 5, Max # of iterations: 5
Length: 6, Max # of iterations: 6
Length: 7, Max # of iterations: 7
Length: 8, Max # of iterations: 8
Length: 9, Max # of iterations: 9
Length: 10, Max # of iterations: 10

9. Create a graph from the output using Google Sheets or other graphing
software. Analyse the graph and denote its Big-O somewhere on the graph.

see './linear.png'

10. What is the Big-O of binary search?

O(log n)

11. What is the Big-Ω of binary search?

O(1)

12. What is the Big-Ө of binary search?

O(log n)
